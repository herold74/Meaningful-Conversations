// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  passwordHash              String
  encryptionSalt            String
  lifeContext               String?   @db.Text
  gamificationState         String?   @db.Text
  unlockedCoaches           String?   @db.Text
  isBetaTester              Boolean   @default(false)
  isAdmin                   Boolean   @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime
  loginCount                Int       @default(0)
  lastLogin                 DateTime?
  status                    String    @default("PENDING") // PENDING, ACTIVE
  activationToken           String?   @unique
  activationTokenExpires    DateTime?
  passwordResetToken        String?   @unique
  passwordResetTokenExpires DateTime?
  accessExpiresAt           DateTime?

  redeemedCodes UpgradeCode[]
  feedback      Feedback[]
}

model UpgradeCode {
  id       String    @id @default(cuid())
  code     String    @unique
  botId    String // Can be a bot ID or a special key like 'premium' or 'big5' or 'ACCESS_PASS_1Y'
  isUsed   Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedById String?
  usedBy   User?     @relation(fields: [usedById], references: [id])

  @@index([usedById])
}

model Ticket {
  id        String   @id @default(cuid())
  type      String // e.g., 'PASSWORD_RESET'
  status    String   @default("OPEN") // OPEN, RESOLVED
  payload   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id              String   @id @default(cuid())
  rating          Int?
  comments        String   @db.Text
  botId           String
  lastUserMessage String?  @db.Text
  botResponse     String?  @db.Text
  isAnonymous     Boolean
  createdAt       DateTime @default(now())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}
